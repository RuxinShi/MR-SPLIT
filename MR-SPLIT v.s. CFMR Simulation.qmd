---
title: MR V.S. CFMR (F30)
author: 
  - name: Ruxin Shi
    orcid: 0009-0001-9483-6444
    email: shiruxin@msu.edu
    affiliations: 
      - name: Michigan State University, Statistics and Probability
params:
  SourceDir: "Simulation study/"
  SourceFile: "MR v.s. CFMR_01_25.qmd"
  LogFile: "MR v.s. CFMR_01_25.html"
date: now
date-modified: last-modified
date-format: YYYY-MM-DD HH:mm:ss z
format: 
  html:
    toc: true
    toc-depth: 4
    toc-location: left
    number-sections: true
    number-depth: 3
    code-fold: true
    code-tools: true
    code-line-numbers: false
    embed-resources: true 
    anchor-sections: true
execute:
  eval: true
  echo: fenced
  output: true
  message: true
  warning: false
  error: true
  include: true
knitr:
  opts_chunk: 
    message: true 
    cfsize: "scriptsize"
---

```{=tex}
\begin{comment}
# Hidden: Notes for User
This script makes use of the LaTeX `verbatim` package's `\comment` command to
build in hidden headings and text that are here for the team preparing the
report but will be omitted from the knitted PDF output file. This makes it
easier to put important comments directly in the file while still creating fully
formatted output that only shows the desired content. So, text inside a comment
block will be omitted from the PDF output.

We can also use code chunks with chunk options such as `#| include: false`, 
`#| echo: false`, `#| message: false`, `#| warning: false` and so on to 
precisely control what R output shows up in the final PDF file. Thus, a script 
file can both serve as process documentation and efficiently generate the final 
version of a report output by applying the reproducible research and literate
programming concepts and tools. 

The `\lfoot` command just below sets the left footer to match the script's 
`LofgFile` parameter value, which we can pass along when rendering the script. 
Ideally it would be in the YAML `include-in-header:` with other pieces, but
I can't get inline code to work if I do it that way. This is the only way I 
could get the filename-based footer to work. 

The LaTeX `placeins` package provides the `\FloatBarrier` command. Using that 
before section headings help keep the figures and tables in their respective 
sections. 
\end{comment}
```
\lfoot{\texttt{\small \detokenize{`r params$LogFile`}}}

\FloatBarrier

# Purpose

This file provides results of MR-SPLIT including type I error and power comparison when applying different split times.

# Simulation

This section provides the codes used to simulate the results.

## Define Global Options

Global R chunk options are defined in the YAML header but local chunk options will over-ride global options. We can temporarily disable an individual chunk by inserting `#| eval = FALSE` on a line at the top of the chunk. The method for creating a `cfsize` option that controls font size in code chunks and their text output is based on an answer to a question posted on [stackoverflow.com](https://stackoverflow.com/a/46526740).

```{r}
#| label: global-options
#| cfsize: footnotesize

# Create a custom chunk hook/option for controlling font size in chunk & output.
# Global value for this is set in YAML header. 
def.chunk.hook  <- knitr::knit_hooks$get("chunk")
knitr::knit_hooks$set(chunk = function(x, options) {
  x <- def.chunk.hook(x, options)
  ifelse(options$cfsize != "normalsize", 
         paste0("\n \\", options$cfsize,"\n\n", x, "\n\n \\normalsize"), 
         x)
  })
```

## Load Packages

Load R packages that we need to get additional functions.

```{r}
#| label: load-packages

library(ivreg)
library(MASS)
library(ggplot2)
library(hdi)
library(glmnet)
library(dplyr)
library(qqman)
library(screening)
library(foreach)
library(doParallel)
library(kableExtra)
library(quarto)           # for quarto_version()
library(gridExtra)
library(patchwork)
```

\FloatBarrier

## Setting

The chunk below shows the settings.

```{r}
#| label: setting
#| eval: true
weightcal=function(weight){
  len=length(weight)
  a=(weight>=0)
  b=abs(weight)/sum(abs(weight))
  c=NULL
  for(i in 1:len){
    if(a[i])c[i]=b[i]
    if(!a[i])c[i]=-1*b[i]
  }
  return(c)
}
#Y outcome, D exposure
#Z instruments, X covariates
J=c(300,3000,30000) #number of SNPs
J1=5 #useful SNPs
N=c(1000,3000,5000) #sample size
MAF=0.3 #minor allele frequency
Times=1000
Split=50
sig=0.8
squareh=c(0.15,0.2,0.3)#extremely weak, weak, strong
ratio=matrix(0,nrow=5,ncol=2)
ratio[,1]=c(0.4,0.4,0.1,0.05,0.05)#weights of SNPs
ratio[,2]=c(0.2,0.2,0.2,0.2,0.2)
beta=c(-0.08,-0.05,0,0.05,0.08) #causal effect
k=2#2-fold
snp=1#number of SNPs
```

## Simulation

The chunk below shows the simulation process of MR-SPLIT.

```{r}
#| label: simulate_MR_SPLIT
#| eval: false
cl <- makeCluster(50)
registerDoParallel(cl)

#tt1=Sys.time()
for(rr in 1:2){
  for(ii in 1:3){
    for(jj in c(3,5)){
      for(hh in 1:3){
        results <- foreach(t=1:Times, .combine=rbind, .packages=c('ivreg','MASS','glmnet','screening','ivmodel')) %dopar% {
          set.seed(t)
          G=matrix(0,nrow=N[ii],ncol=J[snp])
          for(i in 1:J[snp]){
            maf=MAF[i%%length(MAF)]
            if(i%%length(MAF)==0)maf=MAF[length(MAF)]
            GG1=runif(N[ii],min=0,max=1)
            GG1[GG1<=(1-maf)^2]=0
            GG1[GG1>(1-maf^2)]=2
            GG1[which(GG1!=0&GG1!=2)]=1
            G[,i]=GG1
          }
          Sigma=matrix(c(5,sig,sig,5),nrow=2,ncol=2)
          sumsquarepi=squareh[hh]*Sigma[2,2]/(1-squareh[hh])/(2*MAF*(1-MAF))
          pi0=sqrt(sumsquarepi*ratio[,rr])
          error=mvrnorm(N[ii],mu=c(0,0),Sigma=Sigma)
          real=sample(c(1:J[snp]),size=J1,replace = FALSE)
          Greal=G[,real]
          X=as.matrix(Greal)%*%as.matrix(pi0)+error[,1]
          Y=X*beta[jj]+error[,2]
          
          #split sample
          selected=NULL
          unselected=1:N[ii]
          n=sample(unselected,size=N[ii]/k,replace = FALSE)
          selected=cbind(selected,n)
          for(p in 1:k){
            if(p<k){
              n=sample(unselected[-selected],size=N[ii]/k,replace = FALSE)
              selected=cbind(selected,n)
            }
          }
          #select IVs using SIS
          selectIV=list()
          for(p in 1:k){
            n=selected[,p]
            if(J[snp]<N[ii]/2){
              fit=screening(G[-n,],X[-n],method = "sis",num.select = 100)
            }
            if(J[snp]>N[ii]/2){
              fit=screening(G[-n,],X[-n],method = "sis")
            }
            selectIV[[p]]=fit$screen
          }
          #LASSO
          weights=list()
          for(p in 1:k){
            n=selected[,p]
            #select IVs 
            lambda=cv.glmnet(G[-n,selectIV[[p]]],X[-n],alpha=1)$lambda.min
            lasso=glmnet(G[-n,selectIV[[p]]],X[-n],lambda=lambda)
            #coef of all IVs
            a=coef(lasso)[-1,]
            weights[[p]]=a[a!=0]
            #selected IVs
            selectIV[[p]]=selectIV[[p]][a!=0]
          }
          
          #select major and weak based on partial F statistics
          partialF=list()
          for(p in 1:k){
            n=selected[,p]
            full=lm(X[-n]~G[-n,selectIV[[p]]])
            Fs=NULL
            if(length(selectIV[[p]])==1){
              Fs=summary(lm(X[-n]~G[-n,selectIV[[p]]]))$fstat[1]
            }
            if(length(selectIV[[p]])>1){
              for(q in 1:length(selectIV[[p]])){
                reduced=lm(X[-n]~G[-n,selectIV[[p]][-q]])
                Fs[q]=anova(reduced,full)$F[2]
              }
            }
            partialF[[p]]=Fs
          }
          
          selectmajorF30=list()
          selectweakF30=list()
          
          for(p in 1:k){
            selectmajorF30[[p]]=selectIV[[p]][partialF[[p]]>=30]
            selectweakF30[[p]]=selectIV[[p]][partialF[[p]]<30]
           
          }
          
          #Get coef1
          combineMajor1=list()
          for(p in 1:k){
            n=selected[,p]
            weakwei1=weights[[p]][partialF[[p]]<30]
            if(length(weakwei1)>1){
              weakwei1=weightcal(weakwei1)
              combineMajor1[[p]]=cbind(G[n,selectmajorF30[[p]]],G[n,selectweakF30[[p]]]%*%weakwei1)
            } 
            if(length(weakwei1)<=1) combineMajor1[[p]]=G[n,selectIV[[p]]]
          }
        
          #MAJOR1
          hatX=NULL
          for(p in 1:k){
            n=selected[,p]
            fit=lm(X[n]~combineMajor1[[p]])
            hatX=c(hatX,fit$fitted.values)
          }
          fit2=lm(Y[c(selected)]~hatX)
          Major.all1=matrix(NA,ncol=4,nrow=Split)
          Major.all1[1,]=c(summary(fit2)$coef[2,1:4])
          
          for(S in 2:Split){
            selected=NULL
            unselected=1:N[ii]
            n=sample(unselected,size=N[ii]/k,replace = FALSE)
            selected=cbind(selected,n)
            for(p in 1:k){
              if(p<k){
                n=sample(unselected[-selected],size=N[ii]/k,replace = FALSE)
                selected=cbind(selected,n)
              }
            }
            #select IVs using SIS
            selectIV=list()
            for(p in 1:k){
              n=selected[,p]
              if(J[snp]<N[ii]/2){
                fit=screening(G[-n,],X[-n],method = "sis",num.select = 100)
              }
              if(J[snp]>N[ii]/2){
                fit=screening(G[-n,],X[-n],method = "sis")
              }
              selectIV[[p]]=fit$screen
            }
            #LASSO
            weights=list()
            for(p in 1:k){
              n=selected[,p]
              #select IVs 
              lambda=cv.glmnet(G[-n,selectIV[[p]]],X[-n],alpha=1)$lambda.min
              lasso=glmnet(G[-n,selectIV[[p]]],X[-n],lambda=lambda)
              #coef of all IVs
              a=coef(lasso)[-1,]
              weights[[p]]=a[a!=0]
              #selected IVs
              selectIV[[p]]=selectIV[[p]][a!=0]
            }
            
            #select major and weak based on partial F statistics
            partialF=list()
            for(p in 1:k){
              n=selected[,p]
              full=lm(X[-n]~G[-n,selectIV[[p]]])
              Fs=NULL
              if(length(selectIV[[p]])==1){
                Fs=summary(lm(X[-n]~G[-n,selectIV[[p]]]))$fstat[1]
              }
              if(length(selectIV[[p]])>1){
                for(q in 1:length(selectIV[[p]])){
                  reduced=lm(X[-n]~G[-n,selectIV[[p]][-q]])
                  Fs[q]=anova(reduced,full)$F[2]
                }
              }
              partialF[[p]]=Fs
            }
            
            selectmajorF30=list()
            selectweakF30=list()
            
            for(p in 1:k){
              selectmajorF30[[p]]=selectIV[[p]][partialF[[p]]>=30]
              selectweakF30[[p]]=selectIV[[p]][partialF[[p]]<30]
             
            }
            
            #Get coef1
            combineMajor1=list()
            for(p in 1:k){
              n=selected[,p]
              weakwei1=weights[[p]][partialF[[p]]<30]
              if(length(weakwei1)>1){
                weakwei1=weightcal(weakwei1)
                combineMajor1[[p]]=cbind(G[n,selectmajorF30[[p]]],G[n,selectweakF30[[p]]]%*%weakwei1)
              } 
              if(length(weakwei1)<=1) combineMajor1[[p]]=G[n,selectIV[[p]]]
            }
           
            #MAJOR1
            hatX=NULL
            for(p in 1:k){
              n=selected[,p]
              fit=lm(X[n]~combineMajor1[[p]])
              hatX=c(hatX,fit$fitted.values)
            }
            fit2=lm(Y[c(selected)]~hatX)
            Major.all1=matrix(NA,ncol=4,nrow=Split)
            Major.all1[1,]=c(summary(fit2)$coef[2,1:4])
          }
          T1=mean(tan((0.5-Major.all1[,4])*pi))
          p1=0.5-atan(T1)/pi
          point.est1_t=c(mean(Major.all1[,1]),p1)
          
          
          return(point.est1_t)
        }
        write.table(results,file=paste0("CFMR/results/F30/sumresultMR_rr",rr,"_ii",ii,"_jj",jj,"_hh",hh,".txt"))
      }
    }
  }
}

stopCluster(cl)
```

The chunk below shows the simulation process of CFMR.

```{r}
#| label: simulate_CFMR
#| eval: false
k=10#10-fold

snp=1#number of SNPs

cl <- makeCluster(50)
registerDoParallel(cl)
#tt1=Sys.time()
for(rr in 1:2){
  for(ii in 1:3){
  for(jj in c(3,5)){
    for(hh in 1:3){
      #CFMR
      results <- foreach(t=1:Times, .combine=rbind, .packages=c('ivreg','MASS','glmnet','dplyr','qqman','screening','ivmodel')) %dopar% {
        G=matrix(0,nrow=N[ii],ncol=J[snp])
        for(i in 1:J[snp]){
          maf=MAF[i%%length(MAF)]
          if(i%%length(MAF)==0)maf=MAF[length(MAF)]
          GG1=runif(N[ii],min=0,max=1)
          GG1[GG1<=(1-maf)^2]=0
          GG1[GG1>(1-maf^2)]=2
          GG1[which(GG1!=0&GG1!=2)]=1
          G[,i]=GG1
        }
        Sigma=matrix(c(5,sig,sig,5),nrow=2,ncol=2)
        sumsquarepi=squareh[hh]*Sigma[2,2]/(1-squareh[hh])/(2*MAF*(1-MAF))
        pi0=sqrt(sumsquarepi*ratio[,rr])
        error=mvrnorm(N[ii],mu=c(0,0),Sigma=Sigma)
        real=sample(c(1:J[snp]),size=J1,replace = FALSE)
        Greal=G[,real]
        X=as.matrix(Greal)%*%as.matrix(pi0)+error[,1]
        Y=X*beta[jj]+error[,2]
        
        #split sample
        selected=NULL
        unselected=1:N[ii]
        n=sample(unselected,size=N[ii]/k,replace = FALSE)
        selected=cbind(selected,n)
        for(p in 1:k){
          if(p<k){
            n=sample(unselected[-selected],size=N[ii]/k,replace = FALSE)
            selected=cbind(selected,n)
          }
        }
        #select IVs using SIS
        selectIV=list()
        for(p in 1:k){
          n=selected[,p]
          if(J[snp]<N[ii]/2){
            fit=screening(G[-n,],X[-n],method = "sis",num.select = 100)
          }
          if(J[snp]>N[ii]/2){
            fit=screening(G[-n,],X[-n],method = "sis")
          }
          selectIV[[p]]=fit$screen
        }
        #LASSO
          combineCFMR=NULL
        for(p in 1:k){
          n=selected[,p]
          #select IVs 
          lasso=cv.glmnet(as.matrix(G[-n,selectIV[[p]]]),X[-n],alpha=1)
    combineCFMR=c(combineCFMR,predict(lasso,as.matrix(G[n,selectIV[[p]]]), s = "lambda.min"))
        }
        #CFMR
        first1=lm(X[c(selected)]~combineCFMR)
        fit1=lm(Y[c(selected)]~first1$fitted.values)
        CFMR=c(summary(fit1)$coef[2,c(1:4)])
        return(CFMR)
      }
      write.table(results,file=paste0("sumresultCFMR_10 fold_rr",rr,"_ii",ii,"_jj",jj,"_hh",hh,".txt"),row.names = FALSE)
    }
  }
}

}

stopCluster(cl)
```

# Results

## Boxplots of Estimates

```{r fig.width=6, fig.height=3}
setwd("C:/Users/shirx/OneDrive/Desktop/Major/Simulation study")
for(rr in 1:2){
  for(jj in c(3,5)){
  for(ii in 1:3){
    par(mfrow=c(1,3),mar=c(2,2,2,1))
    for(hh in 1:3){
      file=paste0("results/CFMR/F30/sumresultCFMR_10_fold_rr",rr,"_ii",ii,"_jj",jj,"_hh",hh,".txt")
      data1=read.table(file = file,header = TRUE)
      file=paste0("results/CFMR/F30/sumresultMR_rr",rr,"_ii",ii,"_jj",jj,"_hh",hh,".txt")
      data2=read.table(file = file,header = TRUE)
      if(ii==1){
        a=c(-0.4,0.4)
      }
      if(ii==2){
        a=c(-0.2,0.2)
      }
      if(ii==3){
        a=c(-0.15,0.15)
      }
      if(jj==5)a=a+0.1
      if(jj==3){
        boxplot(data.frame("MR-SPLIT"=data2[,1],"CFMR"=data1[,1],check.names = FALSE),main=expression(beta == 0),ylim=a)
      }
      if(jj==5){
        boxplot(data.frame("MR-SPLIT"=data2[,1],"CFMR"=data1[,1],check.names = FALSE),main=expression(beta == 0.08),ylim=a)
      }
      abline(h=beta[jj],col="black")
    }
  }
}
}

```

## Comparison of type I error

```{r fig.width=7, fig.height=3}
#| fig-cap: Comparison of Type I error between MR-SPLIT and CFMR in Scenario I
#calculate type I error
type.I=matrix(0,nrow=18,ncol=5)
colnames(type.I)=c("rr","sample","squareh","MR-SPLIT","CFMR")
jj=3
for(rr in 1:2){
 for(ii in 1:3){
  par(mfrow=c(1,3),mar=c(2,2,2,1))
    for(hh in 1:3){
       file=paste0("results/CFMR/F30/sumresultMR_rr",rr,"_ii",ii,"_jj",jj,"_hh",hh,".txt")
      data1=read.table(file = file,header = TRUE)
      file=paste0("results/CFMR/F30/sumresultCFMR_10_fold_rr",rr,"_ii",ii,"_jj",jj,"_hh",hh,".txt")
      data2=read.table(file = file,header = TRUE)
      type.I[9*(rr-1)+3*(ii-1)+hh,]=c(rr,N[ii],squareh[hh],sum(data1[,2]<0.05)/Times,sum(data2[,4]<0.05)/Times)
    }
  }
}

type1=as.data.frame(type.I[type.I[,1]==1,][,-1])
type_I_long <- reshape2::melt(type1, id.vars = c("sample", "squareh"))


colnames(type_I_long)[colnames(type_I_long) == "variable"] <- "Methods"

# 绘制柱状图
ggplot(type_I_long, aes(x = factor(sample), y = value, fill = Methods)) +
  geom_bar(stat = "identity", position = position_dodge(),color = "#b3b3b3") +
  facet_wrap(~squareh) +
  geom_hline(yintercept = 0.05, color = "black", linetype = "dashed") +
  labs(x = "Sample size", y = "Type I error") +
  theme(plot.title = element_text(hjust = 0.5)) +
  scale_fill_manual(values = c("#e6e6e6", "#666666")) +
  scale_y_continuous(limits = c(0,0.08))+
  theme_minimal()
```


```{r fig.width=7, fig.height=3}
#| fig-cap: Comparison of Type I error between MR-SPLIT and CFMR in Scenario II
type1=as.data.frame(type.I[type.I[,1]==2,][,-1])
type_I_long <- reshape2::melt(type1, id.vars = c("sample", "squareh"))

colnames(type_I_long)[colnames(type_I_long) == "variable"] <- "Methods"

# 绘制柱状图
ggplot(type_I_long, aes(x = factor(sample), y = value, fill = Methods)) +
  geom_bar(stat = "identity", position = position_dodge(),color="#b3b3b3") +
  facet_wrap(~squareh) +
  geom_hline(yintercept = 0.05, color = "black", linetype = "dashed") +
  labs(x = "Sample size", y = "Type I error") +
  theme(plot.title = element_text(hjust = 0.5)) +scale_y_continuous(limits = c(0,0.08))+
  scale_fill_manual(values = c("#e6e6e6", "#666666")) +
  theme_minimal()
```

```{r fig.width=7, fig.height=4}
# 第一个图形对象

type1=as.data.frame(type.I[type.I[,1]==1,][,-1])
type_I_long <- reshape2::melt(type1, id.vars = c("sample", "squareh"))
colnames(type_I_long)[colnames(type_I_long) == "variable"] <- "Methods"

p1 <- ggplot(type_I_long, aes(x = factor(sample), y = value, fill = Methods)) +
  geom_bar(stat = "identity", position = position_dodge(),color = "#b3b3b3") +
  facet_wrap(~squareh) +
  geom_hline(yintercept = 0.05, color = "black", linetype = "dashed") +
  labs(x = NULL, y = "Type I error") +  # 移除X轴标题
  theme(plot.title = element_text(hjust = 0.5)) +
  scale_fill_manual(values = c("#e6e6e6", "#666666")) +
  scale_y_continuous(limits = c(0,0.08)) +
  theme_minimal() +
  theme(legend.position = "none")  # 移除图例
# 第二个图形对象
type1=as.data.frame(type.I[type.I[,1]==2,][,-1])
type_I_long <- reshape2::melt(type1, id.vars = c("sample", "squareh"))

colnames(type_I_long)[colnames(type_I_long) == "variable"] <- "Methods"

p2 <- ggplot(type_I_long, aes(x = factor(sample), y = value, fill = Methods)) +
  geom_bar(stat = "identity", position = position_dodge(), color = "#b3b3b3") +
  facet_wrap(~squareh) +
  geom_hline(yintercept = 0.05, color = "black", linetype = "dashed") +
  labs(x = "Sample size", y = "Type I error") +
  scale_fill_manual(values = c("#e6e6e6", "#666666"),guide = guide_legend(title = NULL)) +
  scale_y_continuous(limits = c(0, 0.08)) +
  theme_minimal() +
  theme(strip.text.x = element_blank())

# 使用patchwork合并图形
combined_plot <- p1 / p2 + 
  plot_layout(guides = 'collect') + # 将图例合并
  theme(legend.position = 'right') # 设置图例位置

# 显示合并后的图形
combined_plot

```

## Comparison of power

```{r fig.width=7, fig.height=3}
#| fig-cap: Comparison of power between MR-SPLIT and CFMR in Scenario I
#calculate power
power=matrix(0,nrow=18,ncol=5)
colnames(power)=c("rr","sample","squareh","MR-SPLIT","CFMR")
jj=5
for(rr in 1:2){
 for(ii in 1:3){
  par(mfrow=c(1,3),mar=c(2,2,2,1))
    for(hh in 1:3){
      file=paste0("results/CFMR/F30/sumresultMR_rr",rr,"_ii",ii,"_jj",jj,"_hh",hh,".txt")
      data1=read.table(file = file,header = TRUE)
       file=paste0("results/CFMR/F30/sumresultCFMR_10_fold_rr",rr,"_ii",ii,"_jj",jj,"_hh",hh,".txt")
      data2=read.table(file = file,header = TRUE)
      power[9*(rr-1)+3*(ii-1)+hh,]=c(rr,N[ii],squareh[hh],sum(data1[,2]<0.05)/Times,sum(data2[,4]<0.05)/Times)
    }
  }
}

power1=as.data.frame(power[power[,1]==1,][,-1])
power_long <- reshape2::melt(power1, id.vars = c("sample", "squareh"))

colnames(power_long)[colnames(power_long) == "variable"] <- "Methods"

# 绘制柱状图
ggplot(power_long, aes(x = factor(sample), y = value, fill = Methods)) +
  geom_bar(stat = "identity", position = position_dodge(),color="#b3b3b3") +
  facet_wrap(~squareh) +
  labs(x = "Sample size", y = "Power" ) +
  theme(plot.title = element_text(hjust = 0.5)) +
  scale_fill_manual(values = c("#e6e6e6", "#666666")) +
  theme_minimal()
```


```{r fig.width=7, fig.height=3}
#| fig-cap: Comparison of power between MR-SPLIT and CFMR in Scenario II
power1=as.data.frame(power[power[,1]==2,][,-1])
power_long <- reshape2::melt(power1, id.vars = c("sample", "squareh"))
colnames(power_long)[colnames(power_long) == "variable"] <- "Methods"

# 绘制柱状图
ggplot(power_long, aes(x = factor(sample), y = value, fill = Methods)) +
  geom_bar(stat = "identity", position = position_dodge(),color="#b3b3b3") +
  facet_wrap(~squareh) +
  labs(x = "Sample size", y = "Power" ) +
  theme(plot.title = element_text(hjust = 0.5)) +
  scale_fill_manual(values = c("#e6e6e6", "#666666")) +
  theme_minimal()
```


```{r fig.width=7, fig.height=4}
# 第一个图形对象

power1=as.data.frame(power[power[,1]==1,][,-1])
power_long <- reshape2::melt(power1, id.vars = c("sample", "squareh"))

colnames(power_long)[colnames(power_long) == "variable"] <- "Methods"

p1 <- ggplot(power_long, aes(x = factor(sample), y = value, fill = Methods)) +
  geom_bar(stat = "identity", position = position_dodge(),color="#b3b3b3") +
  facet_wrap(~squareh) +
  labs(x = NULL, y = "Power" ) +
  theme(plot.title = element_text(hjust = 0.5)) +
  scale_fill_manual(values = c("#e6e6e6", "#666666")) +
  theme_minimal()+
  theme(legend.position = "none")  # 移除图例

# 第二个图形对象
power1=as.data.frame(power[power[,1]==2,][,-1])
power_long <- reshape2::melt(power1, id.vars = c("sample", "squareh"))
colnames(power_long)[colnames(power_long) == "variable"] <- "Methods"

p2 <- ggplot(power_long, aes(x = factor(sample), y = value, fill = Methods)) +
  geom_bar(stat = "identity", position = position_dodge(),color="#b3b3b3") +
  facet_wrap(~squareh) +
  labs(x = "Sample size", y = "Power" ) +
  theme(plot.title = element_text(hjust = 0.5)) +
  scale_fill_manual(values = c("#e6e6e6", "#666666"),guide = guide_legend(title = NULL)) +
  theme_minimal()+
  theme(strip.text.x = element_blank())

# 使用patchwork合并图形
combined_plot <- p1 / p2 + 
  plot_layout(guides = 'collect') + # 将图例合并
  theme(legend.position = 'right') # 设置图例位置

# 显示合并后的图形
combined_plot

```

## Comparison of RMSE

```{r fig.width=7, fig.height=3}
#| fig-cap: Comparison of RMSE between MR-SPLIT and CFMR in Scenario I
#calculate RMSE
RMSE=matrix(0,nrow=18,ncol=5)
colnames(RMSE)=c("rr","sample","squareh","MR-SPLIT","CFMR")
jj=5
for(rr in 1:2){
 for(ii in 1:3){
  par(mfrow=c(1,3),mar=c(2,2,2,1))
    for(hh in 1:3){
        file=paste0("results/CFMR/F30/sumresultMR_rr",rr,"_ii",ii,"_jj",jj,"_hh",hh,".txt")
      data1=read.table(file = file,header = TRUE)
      file=paste0("results/CFMR/F30/sumresultCFMR_10_fold_rr",rr,"_ii",ii,"_jj",jj,"_hh",hh,".txt")
      data2=read.table(file = file,header = TRUE)
      RMSE[9*(rr-1)+3*(ii-1)+hh,]=c(rr,N[ii],squareh[hh],sqrt(mean((data1[,1]-beta[jj])^2)),sqrt(mean((data2[,1]-beta[jj])^2)))
    }
  }
}

RMSE1=as.data.frame(RMSE[RMSE[,1]==1,][,-1])
RMSE_long <- reshape2::melt(RMSE1, id.vars = c("sample", "squareh"))
colnames(RMSE_long)[colnames(RMSE_long) == "variable"] <- "Methods"

# 绘制柱状图
ggplot(RMSE_long, aes(x = factor(sample), y = value, fill = Methods)) +
  geom_bar(stat = "identity", position = position_dodge(),color="#b3b3b3") +
  facet_wrap(~squareh) +
  labs(x = "Sample size", y = "RMSE"
  ) +
  theme(plot.title = element_text(hjust = 0.5)) +
  scale_fill_manual(values = c("#e6e6e6", "#666666")) +
  theme_minimal()
```


```{r fig.width=7, fig.height=3}
#| fig-cap: Comparison of RMSE between MR-SPLIT and CFMR in Scenario II
RMSE1=as.data.frame(RMSE[RMSE[,1]==2,][,-1])
RMSE_long <- reshape2::melt(RMSE1, id.vars = c("sample", "squareh"))
colnames(RMSE_long)[colnames(RMSE_long) == "variable"] <- "Methods"

# 绘制柱状图
ggplot(RMSE_long, aes(x = factor(sample), y = value, fill = Methods)) +
  geom_bar(stat = "identity", position = position_dodge(),color="#b3b3b3") +
  facet_wrap(~squareh) +
  labs(x = "Sample size", y = "RMSE"
  ) +
  theme(plot.title = element_text(hjust = 0.5)) +
  scale_fill_manual(values = c("#e6e6e6", "#666666")) +
  theme_minimal()
```


```{r fig.width=7, fig.height=4}
# 第一个图形对象

RMSE1=as.data.frame(RMSE[RMSE[,1]==1,][,-1])
RMSE_long <- reshape2::melt(RMSE1, id.vars = c("sample", "squareh"))
colnames(RMSE_long)[colnames(RMSE_long) == "variable"] <- "Methods"

p1 <- ggplot(RMSE_long, aes(x = factor(sample), y = value, fill = Methods)) +
  geom_bar(stat = "identity", position = position_dodge(),color="#b3b3b3") +
  facet_wrap(~squareh) +
  labs(x = NULL, y = "RMSE"
  ) +
  theme(plot.title = element_text(hjust = 0.5)) +
  scale_fill_manual(values = c("#e6e6e6", "#666666")) +
  theme_minimal()+
  theme(legend.position = "none")  # 移除图例


# 第二个图形对象
RMSE1=as.data.frame(RMSE[RMSE[,1]==2,][,-1])
RMSE_long <- reshape2::melt(RMSE1, id.vars = c("sample", "squareh"))
colnames(RMSE_long)[colnames(RMSE_long) == "variable"] <- "Methods"

p2 <- ggplot(RMSE_long, aes(x = factor(sample), y = value, fill = Methods)) +
  geom_bar(stat = "identity", position = position_dodge(),color="#b3b3b3") +
  facet_wrap(~squareh) +
  labs(x = "Sample size", y = "RMSE"
  ) +
  theme(plot.title = element_text(hjust = 0.5)) +
  scale_fill_manual(values = c("#e6e6e6", "#666666"),guide = guide_legend(title = NULL)) +
  theme_minimal()+
  theme(strip.text.x = element_blank())
# 使用patchwork合并图形
combined_plot <- p1 / p2 + 
  plot_layout(guides = 'collect') + # 将图例合并
  theme(legend.position = 'right') # 设置图例位置

# 显示合并后的图形
combined_plot

```

# Software Information

This section documents information that is important for reproducibility. Most users will not need to read it. It is primarily here for use by the statistician on the team.

We used [R](https://www.r-project.org/) as our main computing environment and [Quarto](https://quarto.org/) scripts to enhance reproducibility. We used [RStudio](www.rstudio.org) as the editor to interface with R and Quarto.

-   Software chain: **qmd file \> RStudio \> Quarto \> R \> knitr \> md file \> Pandoc \> html file**.
-   Source file: **`r params$SourceFile`**
-   Output file: **`r params$LogFile`**
-   [Quarto `r quarto_version()`](https://quarto.org/) runs `*.qmd` files through [R](https://www.r-project.org/) and [knitr](https://yihui.org/knitr/) to produce `*.md` markdown files.
-   [Pandoc `r rmarkdown::pandoc_version()`](https://pandoc.org) converts markdown files (`*.md`) to other formats, including LaTeX (`*.tex`) and HTML (`*.html`) among others.

\FloatBarrier

## Versions

This document was generated using the following computational environment and dependencies:

```{r}
#| label: show-version
#| cfsize: scriptsize
#| echo: true

# Get R and R package version numbers in use.
devtools::session_info()
```

\FloatBarrier
